exp 7: execute python code cleaning

Python script that takes a list of numbers and calculates their average.
def calculate_average(numbers):
    total = 0
    for num in numbers:
        total += num
    average = total / len(numbers)
    return average

nums = [10, 20, 30, 40, 50]
avg = calculate_average(nums)
print("The average is:", avg)




Cleaned-Up Python Code
Here's a more polished version with improved readability and error handling:

def calculate_average(numbers):
    """Calculate the average of a list of numbers."""
    if not numbers:  # Check if the list is empty
        raise ValueError("The list of numbers is empty.")
    
    total = sum(numbers)  # Use built-in sum function
    average = total / len(numbers)
    return average

def main():
    """Main function to demonstrate average calculation."""
    nums = [10, 20, 30, 40, 50]
    
    try:
        avg = calculate_average(nums)
        print(f"The average is: {avg:.2f}")
    except ValueError as e:
        print(e)

if __name__ == "__main__":
    main()


Improvements Made
1 Function Documentation: Added a docstring to calculate_average for better understanding.
Error Handling: Added a check to handle an empty list scenario and raise a ValueError.
Built-in Functions: Used the built-in sum() function for summing up the list.
Formatting: Used formatted string literals (f-strings) for cleaner output and specified 2 decimal places for the average.
Main Function: Encapsulated the script's logic inside a main() function and used if __name__ == "__main__": to allow the script to be imported without running the main() function immediately.
This version is more robust and easier to understand, and it includes basic error handling for edge cases.



before clean

n = 10
sum_all = 0

for i in range(1, n + 1):
    sum_all = sum_all + i

print(sum_all)  # 55

after clean

n = 10
sum_all = sum(range(1, n + 1))

print(sum_all)  # 55



https://testdriven.io/blog/clean-code-python/


https://medium.com/@ydmarinb/clean-code-in-python-good-vs-bad-practices-examples-61039f7dccf7


exp 8:enact cross lingual conversation

pip install googletrans==4.0.0-rc1
from googletrans import Translator

# Initialize the translator
translator = Translator()

def translate_text(text, dest_language):
    """Translate text to the specified destination language."""
    translated = translator.translate(text, dest=dest_language)
    return translated.text

# Conversation setup
conversations = [
    {"text": "Hi there! How’s your day going?", "lang": "en"},
    {"text": "¡Hola! Mi día ha sido muy ocupado, pero está bien. ¿Qué has estado haciendo?", "lang": "es"},
    {"text": "J’ai travaillé sur un projet important au travail. Et toi, qu’est-ce que tu as fait de plus intéressant aujourd’hui ?", "lang": "fr"},
    {"text": "Ja, ich habe ein wenig Zeit gefunden, um ein Buch zu lesen. Was machst du normalerweise, um dich zu entspannen?", "lang": "de"}
]

# Print the conversation
for convo in conversations:
    text = convo["text"]
    lang = convo["lang"]
    print(f"Original ({lang}): {text}")
    if lang != "en":
        translated_text = translate_text(text, "t")
        print(f"Translated to English: {translated_text}")
    print()

